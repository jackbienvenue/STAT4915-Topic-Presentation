---
title: "First Attempt at Presentation Script"
author: "Jack Bienvenue"
output: html_document
date: "30 January 2025"
---

Okay, so we need to try out doing this network analysis.

``` {python}
#| echo: false
#| eval: true

# Package Import
import pandas as pd
import geopandas as gpd
import networkx as nx
import matplotlib.pyplot as plt
from shapely.geometry import Point, LineString
import geopandas as gpd
from sklearn.neighbors import KDTree
import numpy as np
import folium

# Data Import
north_america_rail_shapefile = gpd.read_file('../data/tl_2022_us_rails/tl_2022_us_rails.shp')
```

```{python}
#| echo: false
#| eval: true

# Load the shapefile
north_america_rail_shapefile = gpd.read_file('../data/tl_2022_us_rails/tl_2022_us_rails.shp')

# Create a graph from the shapefile
graph = nx.Graph()
for line in north_america_rail_shapefile.geometry:
    if line.geom_type == 'LineString':  # Ensure the geometry is a LineString
        for i in range(len(line.coords) - 1):
            start = line.coords[i]
            end = line.coords[i + 1]
            graph.add_edge(start, end, weight=LineString([start, end]).length)

# Check the number of nodes and edges in the graph
print("Number of nodes in the graph:", graph.number_of_nodes())
print("Number of edges in the graph:", graph.number_of_edges())

def find_nearest_node(graph, point):
    nodes = np.array(list(graph.nodes()))  # Convert nodes to a NumPy array
    tree = KDTree(nodes)  # Create a KDTree from the nodes
    dist, idx = tree.query([point], k=1)  # Find the nearest node
    
    # Inspect what 'nearest_node' looks like
    nearest_node = nodes[idx[0]]  # Get the nearest node
    print(f"Nearest node raw output: {nearest_node}")  # Debugging
    
    # Ensure that 'nearest_node' is in (longitude, latitude) order
    if nearest_node.ndim == 2:  # if it's a 2D array (e.g., [[lon, lat]])
        nearest_node = nearest_node[0]  # Flatten it to [lon, lat]
        
    if len(nearest_node) == 2:
        nearest_node_tuple = (nearest_node[1], nearest_node[0])  # Convert to (latitude, longitude)
    else:
        raise ValueError(f"Unexpected node structure: {nearest_node}")

    # Verify the nearest node exists in the graph
    if tuple(nearest_node) not in graph:
        raise ValueError(f"Nearest node {tuple(nearest_node)} not found in the graph.")

    print(f"Nearest node to {point}: {nearest_node_tuple}")  # Debugging
    return nearest_node_tuple

# Input your own points for start_node and end_node
start_point = (-75.152325, 39.966305)  # Example start point LONG/LAT 
end_point = (-73.9768, 40.7534)  # Example end point LONG/LAT (Grand Central Station)

# (-72.249200, 41.810828) Austin
# (-75.152325, 39.966305) Philly (random spot)

# Find the nearest nodes on the network
start_node = find_nearest_node(graph, start_point)
end_node = find_nearest_node(graph, end_point)
```

We were able to write a function which takes our input points and finds the nearest node on the graph of the railways. Now, we can input any points we want to get the following optimization function to work.

``` {python}
# Load the shapefile (adjust the path to where your shapefile is stored)
north_america_rail_shapefile = gpd.read_file('../data/tl_2022_us_rails/tl_2022_us_rails.shp')

# Create a graph from the shapefile
graph = nx.Graph()
for line in north_america_rail_shapefile.geometry:
    if line.geom_type == 'LineString':  # Ensure the geometry is a LineString
        for i in range(len(line.coords) - 1):
            start = line.coords[i]
            end = line.coords[i + 1]
            graph.add_edge(start, end, weight=LineString([start, end]).length)

# Extract node positions (latitude, longitude)
node_positions = {node: (node[1], node[0]) for node in graph.nodes()}

# Create a plot
fig, ax = plt.subplots(figsize=(10, 10))

# Plot the shapefile for background
north_america_rail_shapefile.plot(ax=ax, color='lightgray', linewidth=0.5)

# Plot the edges of the graph
for edge in graph.edges():
    start, end = edge
    start_pos = node_positions[start]
    end_pos = node_positions[end]
    ax.plot([start_pos[0], end_pos[0]], [start_pos[1], end_pos[1]], color='blue', linewidth=0.5)

# Plot the nodes as scatter points
node_x = [pos[0] for pos in node_positions.values()]
node_y = [pos[1] for pos in node_positions.values()]
ax.scatter(node_x, node_y, color='red', s=10, label='Nodes')

# Optionally, add labels for a few nodes (for clarity)
for i, (node, pos) in enumerate(node_positions.items()):
    if i % 1000 == 0:  # Label every 1000th node (or adjust as needed)
        ax.text(pos[0], pos[1], str(node), fontsize=8, color='black', ha='center')

# Add labels and title
plt.title("Rail Network Graph", fontsize=14)
plt.xlabel("Longitude")
plt.ylabel("Latitude")

# Show the map
plt.legend()
plt.show()
```

``` {python}
#| echo: true
#| eval: false

# Swap start_node and end_node to match the graph's node format
start_node = (start_node[1], start_node[0])  # (longitude, latitude)
end_node = (end_node[1], end_node[0])  # (longitude, latitude)

# Now find the shortest path between the nearest nodes
path = nx.shortest_path(graph, start_node, end_node, weight='weight')

# Calculate the length of each segment in the path
segment_lengths = []
for i in range(len(path) - 1):
    segment = LineString([path[i], path[i + 1]])
    segment_lengths.append(segment.length)

# Plot the shapefile
north_america_rail_shapefile.plot()

# Plot the path
x, y = zip(*path)
plt.plot(x, y, color='red')

# Annotate the start and end points
plt.scatter(*start_point, color='green', label='Start Point')
plt.scatter(*end_point, color='blue', label='End Point')
plt.scatter(*start_node, color='orange', label='Nearest Start Node')
plt.scatter(*end_node, color='purple', label='Nearest End Node')

plt.legend()
plt.show()

# Print the segment lengths
print("Segment lengths:", segment_lengths)
```

